/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mainGUIs;

import implementations.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.*;
import javax.swing.Timer;

/**
 *
 * @author NelsonJrLHerrera
 */
public class TeacherGUI extends javax.swing.JFrame {
    AttendanceDAOImpl attendanceDAOImpl = new AttendanceDAOImpl();
    TeacherDAOImpl teacherDAOImpl = new TeacherDAOImpl();
    ClassesDAOImpl classesDAOImpl = new ClassesDAOImpl();
    EventDAOImpl eventDAOImpl = new EventDAOImpl();
    private final User user;
    List<Classes> classList;
    private Timer refreshTimer;

    /**
     * Creates new form TeacherGUI
     */
    public TeacherGUI(User user) {
        this.user = user;
        initComponents();
        greetUser();
        startAutoRefresh();
    }
    
    public void startAutoRefresh() {
        int delay = 5000; // 5 seconds
        if (refreshTimer != null && refreshTimer.isRunning()) {
            refreshTimer.stop();
        }
        refreshTimer = new Timer(delay, e -> refreshTables());
        refreshTimer.setRepeats(true);
        refreshTimer.start();
        refreshTables();  // Immediate refresh
    }

    public void stopAutoRefresh() {
        if (refreshTimer != null && refreshTimer.isRunning()) {
            refreshTimer.stop();
        }
    }

    
    public void greetUser() {
        greetLBL.setText("Welcome to EAM-System Teacher " + this.user.getFirstname());
    }

    public void refreshEventsTBL() {
        // Clear existing rows
        DefaultTableModel model = (DefaultTableModel) eventsTBL.getModel();
        model.setRowCount(0);

        // Fetch all events from the database
        List<Event> events = eventDAOImpl.readAllEvents();

        if (events == null) {
            JOptionPane.showMessageDialog(this, "Failed to load events from the database.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Format helper
        SimpleDateFormat inputFormat = new SimpleDateFormat("HH:mm:ss");
        SimpleDateFormat outputFormat = new SimpleDateFormat("hh:mm a");

        // Populate table with each event
        for (Event e : events) {
            String formattedStart = e.getStartTime();
            String formattedEnd = e.getEndTime();

            try {
                Date start = inputFormat.parse(e.getStartTime());
                formattedStart = outputFormat.format(start);

                Date end = inputFormat.parse(e.getEndTime());
                formattedEnd = outputFormat.format(end);
            } catch (Exception ex) {
                ex.printStackTrace(); // fallback: use original time values
            }

            Object[] rowData = {
                e.getEventId(),
                e.getEventName(),
                e.getDescription(),
                e.getVenue(),
                e.getDate(),
                formattedStart,
                formattedEnd,
                eventDAOImpl.determineStatus(e.getDate(), e.getEndTime())
            };
            model.addRow(rowData);
        }
    }

    public void refreshClassTBL() {
        DefaultTableModel model = (DefaultTableModel) classTBL.getModel();
        model.setRowCount(0); // Clear existing rows

        Teacher teacher = teacherDAOImpl.getTeacherByUserId(user.getUserId());

        this.classList = classesDAOImpl.readAllByAdviserId(teacher.getTeacherId()); // Usually one class

        if (classList == null || classList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No class assigned to this teacher.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        StudentDAOImpl studentDAO = new StudentDAOImpl();

        for (Classes cls : classList) {
            int studentCount = 0;
            List<Student> students = studentDAO.read_all_by_class_id(cls.getClass_id());
            if (students != null) {
                studentCount = students.size();
            }

            Object[] row = {
                cls.getClass_id(),
                cls.getGrade(),
                cls.getSection(),
                studentCount
            };
            model.addRow(row);
        }
    }

    public void refreshAttendanceTBL() {
        attendanceDAOImpl.refreshAttendanceTBL(attendanceTBL);
    }

    public void refreshTables() {
        refreshEventsTBL();
        refreshClassTBL();
        refreshAttendanceTBL();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eventsPUM = new javax.swing.JPopupMenu();
        markAttendanceMI = new javax.swing.JMenuItem();
        classPUM = new javax.swing.JPopupMenu();
        viewClassMI = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        greetLBL = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        classTBL = new javax.swing.JTable();
        classSearchTF = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        eventsTBL = new javax.swing.JTable();
        eventsSearchTF = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        attendanceTBL = new javax.swing.JTable();
        attendanceSearchTF = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        logOutMI = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        markAttendanceMI.setText("Update Attendance");
        markAttendanceMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markAttendanceMIActionPerformed(evt);
            }
        });
        eventsPUM.add(markAttendanceMI);

        viewClassMI.setText("View Students");
        viewClassMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewClassMIActionPerformed(evt);
            }
        });
        classPUM.add(viewClassMI);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        greetLBL.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        greetLBL.setText("Welcome to EAM-System Teacher user");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(229, Short.MAX_VALUE)
                .addComponent(greetLBL)
                .addGap(200, 200, 200))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(209, 209, 209)
                .addComponent(greetLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(299, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Dashboard", jPanel1);

        classTBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class ID", "Grade", "Section", "No. of Students"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        classTBL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                classTBLMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(classTBL);

        classSearchTF.setText("Search:");

        jButton3.setText("Search");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 872, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(classSearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classSearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Class", jPanel2);

        eventsTBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Event ID", "Event", "Description", "Location", "Date", "Start Time", "End Time", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        eventsTBL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                eventsTBLMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(eventsTBL);

        eventsSearchTF.setText("Search:");
        eventsSearchTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventsSearchTFActionPerformed(evt);
            }
        });

        jButton2.setText("Search");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(eventsSearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 872, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventsSearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Events", jPanel3);

        attendanceTBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student", "Event", "Date", "Check In", "Check Out", "Remark"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(attendanceTBL);

        attendanceSearchTF.setText("Search:");

        jButton1.setText("Search");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 866, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(attendanceSearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attendanceSearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Attendance", jPanel4);

        jMenu1.setText("Settings");

        logOutMI.setText("Log out");
        logOutMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutMIActionPerformed(evt);
            }
        });
        jMenu1.add(logOutMI);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Other");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 962, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void eventsSearchTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventsSearchTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventsSearchTFActionPerformed

    private void logOutMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutMIActionPerformed
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(
                this,
                "Are you sure to log out from EAM System?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION
        );

        if (option == JOptionPane.YES_OPTION) {
            LoginGUI loginGUI = new LoginGUI();
            loginGUI.setVisible(true);
            this.dispose();
        } else {
            // User clicked "No" — do nothing
        }

    }//GEN-LAST:event_logOutMIActionPerformed

    private void classTBLMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classTBLMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            int row = classTBL.rowAtPoint(evt.getPoint());

            if (row >= 0) {
                classTBL.setRowSelectionInterval(row, row);
            }

            classPUM.show(classTBL, evt.getX(), evt.getY());
        } else {
            System.out.println("Nothing happened!");
        }
    }//GEN-LAST:event_classTBLMouseReleased

    private void eventsTBLMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventsTBLMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            int row = eventsTBL.rowAtPoint(evt.getPoint());

            if (row >= 0) {
                eventsTBL.setRowSelectionInterval(row, row);
            }

            eventsPUM.show(eventsTBL, evt.getX(), evt.getY());
        } else {
            System.out.println("Nothing happened!");
        }
    }//GEN-LAST:event_eventsTBLMouseReleased

    private void viewClassMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewClassMIActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) classTBL.getModel();
        int class_id = Integer.parseInt(model.getValueAt(classTBL.getSelectedRow(), 0).toString());

        Classes_Dialog classes = new Classes_Dialog(this, true, class_id);
        classes.setVisible(true);
    }//GEN-LAST:event_viewClassMIActionPerformed

    private void markAttendanceMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markAttendanceMIActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) eventsTBL.getModel();
        int event_id = Integer.parseInt(model.getValueAt(eventsTBL.getSelectedRow(), 0).toString());
        String status = (String) model.getValueAt(eventsTBL.getSelectedRow(), 7);

        if ("Finished".equalsIgnoreCase(status)) {
            JOptionPane.showConfirmDialog(
                    this,
                    "This event is already finished.",
                    "Error",
                    JOptionPane.OK_OPTION
            );
        } else {
            Event event = eventDAOImpl.read_oneEvent(event_id);
            Teacher teacher = teacherDAOImpl.getTeacherByUserId(user.getUserId());
            Classes classes = classesDAOImpl.readOneByAdviserId(teacher.getTeacherId());

            Mark_Attendance markAttendance = new Mark_Attendance(this, true, event, classes);
            markAttendance.setVisible(true);
        }
        
        refreshAttendanceTBL();
    }//GEN-LAST:event_markAttendanceMIActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TeacherGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TeacherGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TeacherGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TeacherGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField attendanceSearchTF;
    private javax.swing.JTable attendanceTBL;
    private javax.swing.JPopupMenu classPUM;
    private javax.swing.JTextField classSearchTF;
    private javax.swing.JTable classTBL;
    private javax.swing.JPopupMenu eventsPUM;
    private javax.swing.JTextField eventsSearchTF;
    private javax.swing.JTable eventsTBL;
    private javax.swing.JLabel greetLBL;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem logOutMI;
    private javax.swing.JMenuItem markAttendanceMI;
    private javax.swing.JMenuItem viewClassMI;
    // End of variables declaration//GEN-END:variables
}
