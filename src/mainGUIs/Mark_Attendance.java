/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Dialog.java to edit this template
 */
package mainGUIs;

import database.DBConnection;
import implementations.AttendanceDAOImpl;
import implementations.StudentDAOImpl;
import implementations.UserDAOImpl;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.*;
import java.sql.*;

/**
 *
 * @author NelsonJrLHerrera
 */
public class Mark_Attendance extends java.awt.Dialog {

    AttendanceDAOImpl attendanceDAOImpl = new AttendanceDAOImpl();
    StudentDAOImpl studentDAOImpl = new StudentDAOImpl();
    UserDAOImpl userDAOImpl = new UserDAOImpl();
    private Event event;
    private Classes class_name;

    /**
     * Creates new form Mark_Attendance
     */
    public Mark_Attendance(java.awt.Frame parent, boolean modal, Event event, Classes class_name) {
        super(parent, modal);
        this.event = event;
        this.class_name = class_name;
        initComponents();
        modifyLBL();
        refreshStudentsTBL();
    }

    public void modifyLBL() {
        attendanceLBL.setText(this.class_name.getGrade() + "-" + this.class_name.getSection() + " Attendance for " + this.event.getEventName());
    }

    public void refreshStudentsTBL() {
        DefaultTableModel model = (DefaultTableModel) studentsTBL.getModel();
        model.setRowCount(0); // clear previous rows

        // Fetch students for the class
        List<Student> students = studentDAOImpl.read_all_by_class_id(this.class_name.getClass_id());
        List<User> users = userDAOImpl.getAllUsers();

        // Map user_id -> User for fast lookup
        Map<Integer, User> userMap = new HashMap<>();
        for (User user : users) {
            userMap.put(user.getUserId(), user);
        }

        // Fetch attendance list for the class
        List<Attendance> attendances = attendanceDAOImpl.getAttendanceByClassId(this.class_name.getClass_id());

        // Build map: student_id -> remark for attendances of this event only
        Map<Integer, String> attendanceRemarks = new HashMap<>();
        for (Attendance att : attendances) {
            if (att.getEventId() == this.event.getEventId()) {
                attendanceRemarks.put(att.getStudentId(), att.getRemark());
            }
        }

        for (Student student : students) {
            User user = userMap.get(student.getUser_id());
            if (user == null) {
                System.err.println("User not found for user_id: " + student.getUser_id());
                continue;
            }

            // Get student_id by LRN (ensures correct mapping)
            int studentId = studentDAOImpl.getStudentIdByLRN(student.getLrn());

            String remark = attendanceRemarks.get(studentId);
            String attendanceStatus = (remark != null && !remark.trim().isEmpty()) ? "Marked" : "UnMarked";

            String fullName = user.getLastname() + ", " + user.getFirstname();

            // Add row with all columns including remark
            model.addRow(new Object[]{
                student.getLrn(),
                fullName,
                user.getGender(),
                user.getEmail(),
                attendanceStatus,
                remark != null ? remark : ""
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        attendancePUM = new javax.swing.JPopupMenu();
        checkInMI = new javax.swing.JMenuItem();
        markAbsentMI = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentsTBL = new javax.swing.JTable();
        attendanceLBL = new javax.swing.JLabel();

        checkInMI.setText("Check In");
        checkInMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkInMIActionPerformed(evt);
            }
        });
        attendancePUM.add(checkInMI);

        markAbsentMI.setText("Mark Absent");
        markAbsentMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markAbsentMIActionPerformed(evt);
            }
        });
        attendancePUM.add(markAbsentMI);

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(31, 125, 83));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField2.setBackground(new java.awt.Color(204, 255, 204));
        jTextField2.setForeground(new java.awt.Color(102, 102, 102));
        jTextField2.setText("Search a student...");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 320, -1));

        jButton1.setBackground(new java.awt.Color(153, 255, 153));
        jButton1.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        jButton1.setText("Search");
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 30, 90, -1));

        jButton3.setBackground(new java.awt.Color(153, 255, 153));
        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1022, 520, 120, -1));

        studentsTBL.setBackground(new java.awt.Color(204, 255, 204));
        studentsTBL.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        studentsTBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "LRN", "Student", "Gender", "Email", "Attendance", "Remark"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        studentsTBL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                studentsTBLMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(studentsTBL);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 1120, 450));

        attendanceLBL.setFont(new java.awt.Font("Sitka Banner", 1, 24)); // NOI18N
        attendanceLBL.setForeground(new java.awt.Color(255, 255, 255));
        attendanceLBL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        attendanceLBL.setText("Grade & Section Attendance for Event Name");
        jPanel1.add(attendanceLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 20, 590, 40));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 1170, 560));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

        /**
         * Closes the dialog
         */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void studentsTBLMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentsTBLMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            int row = studentsTBL.rowAtPoint(evt.getPoint());

            if (row >= 0) {
                studentsTBL.setRowSelectionInterval(row, row);
            }

            attendancePUM.show(studentsTBL, evt.getX(), evt.getY());
        } else {
            System.out.println("Nothing happened!");
        }
    }//GEN-LAST:event_studentsTBLMouseReleased

    private void checkInMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkInMIActionPerformed
        int selectedRow = studentsTBL.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a student to check in.");
            return;
        }

        try {
            // Validate event date matches today
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            LocalDate eventDate = LocalDate.parse(event.getDate(), dateFormatter);
            LocalDate today = LocalDate.now();

            if (!eventDate.equals(today)) {
                JOptionPane.showMessageDialog(this, "Check-in is only allowed on the event day.");
                return;
            }

            String lrn = studentsTBL.getValueAt(selectedRow, 0).toString(); // LRN column index 0
            long lrnValue = Long.parseLong(lrn);

            int studentId = studentDAOImpl.getStudentIdByLRN(lrnValue);
            if (studentId == -1) {
                JOptionPane.showMessageDialog(this, "Student not found.");
                return;
            }

            int eventId = event.getEventId();

            AttendanceDAOImpl attendanceDAO = new AttendanceDAOImpl();
            List<Attendance> attendances = attendanceDAO.getAllAttendance();

            // Find existing attendance for this student & event, if any
            Attendance existingAttendance = attendances.stream()
                    .filter(a -> a.getStudentId() == studentId && a.getEventId() == eventId)
                    .findFirst()
                    .orElse(null);

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

            DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(event.getStartTime().length() == 5 ? "HH:mm" : "HH:mm:ss");
            LocalTime eventStartTime = LocalTime.parse(event.getStartTime(), timeFormatter);

            LocalDateTime eventStart = LocalDateTime.of(today, eventStartTime);

            String remark = (now.isBefore(eventStart) || now.isEqual(eventStart)) ? "On Time" : "Late";

            if (existingAttendance != null) {
                // Confirm update with user
                int option = JOptionPane.showConfirmDialog(this,
                        "An attendance record already exists for this student.\nDo you want to update it?",
                        "Confirm Update",
                        JOptionPane.YES_NO_OPTION);

                if (option == JOptionPane.YES_OPTION) {
                    // Update existing attendance record
                    existingAttendance.setCheck_in_time(now.format(dateTimeFormatter));
                    existingAttendance.setRemark(remark);
                    boolean updated = attendanceDAO.updateAttendance(existingAttendance);

                    if (updated) {
                        studentsTBL.setValueAt("Marked", selectedRow, 4); // Status
                        studentsTBL.setValueAt(remark, selectedRow, 5);   // Remark
                        JOptionPane.showMessageDialog(this, "Attendance record updated successfully.");
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to update attendance. Please try again.");
                    }
                } else {
                    // User chose not to update
                    JOptionPane.showMessageDialog(this, "Check-in cancelled.");
                }
            } else {
                // No existing record - create new attendance record
                Attendance attendance = new Attendance(
                        0,
                        eventId,
                        studentId,
                        now.format(dateTimeFormatter),
                        null,
                        remark
                );

                boolean success = attendanceDAO.createAttendance(attendance);

                if (success) {
                    studentsTBL.setValueAt("Marked", selectedRow, 4); // Status
                    studentsTBL.setValueAt(remark, selectedRow, 5);   // Remark
                    JOptionPane.showMessageDialog(this, "Check-in successful!");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to check in. Please try again.");
                }
            }

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid LRN format.");
        } catch (DateTimeParseException ex) {
            JOptionPane.showMessageDialog(this, "Invalid event date or time format.");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + ex.getMessage());
        }

    }//GEN-LAST:event_checkInMIActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void markAbsentMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markAbsentMIActionPerformed
        // TODO add your handling code here:
        int selectedRow = studentsTBL.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a student to mark absent.");
            return;
        }

        try {
            // Validate event date matches today
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            LocalDate eventDate = LocalDate.parse(event.getDate(), dateFormatter);
            LocalDate today = LocalDate.now();

            if (!eventDate.equals(today)) {
                JOptionPane.showMessageDialog(this, "You can only mark absent on the event day.");
                return;
            }

            // Get student LRN and ID
            String lrn = studentsTBL.getValueAt(selectedRow, 0).toString();
            long lrnValue = Long.parseLong(lrn);
            int studentId = studentDAOImpl.getStudentIdByLRN(lrnValue);

            if (studentId == -1) {
                JOptionPane.showMessageDialog(this, "Student not found.");
                return;
            }

            int eventId = event.getEventId();

            AttendanceDAOImpl attendanceDAO = new AttendanceDAOImpl();

            // Find existing attendance record for this student & event
            List<Attendance> attendances = attendanceDAO.getAllAttendance();
            Attendance existingAttendance = attendances.stream()
                    .filter(a -> a.getStudentId() == studentId && a.getEventId() == eventId)
                    .findFirst()
                    .orElse(null);

            if (existingAttendance != null) {
                // Prompt user for update confirmation
                int response = JOptionPane.showConfirmDialog(this,
                        "An attendance record already exists for this student. Do you want to update it to 'Absent'?",
                        "Confirm Update",
                        JOptionPane.YES_NO_OPTION);

                if (response == JOptionPane.YES_OPTION) {
                    // Update existing record to mark absent
                    existingAttendance.setCheck_in_time(null);
                    existingAttendance.setCheck_out_time(null);
                    existingAttendance.setRemark("Absent");

                    boolean updateSuccess = attendanceDAO.updateAttendance(existingAttendance);

                    if (updateSuccess) {
                        studentsTBL.setValueAt("Marked", selectedRow, 4); // Status
                        studentsTBL.setValueAt("Absent", selectedRow, 5); // Remark
                        JOptionPane.showMessageDialog(this, "Attendance updated to absent successfully.");
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to update attendance. Please try again.");
                    }
                } else {
                    // User declined update
                    JOptionPane.showMessageDialog(this, "No changes made to attendance record.");
                }
            } else {
                // No existing attendance - create new absent record
                Attendance newAttendance = new Attendance(
                        0, // Auto-increment ID placeholder
                        eventId,
                        studentId,
                        null, // no check-in time
                        null, // no check-out time
                        "Absent"
                );

                boolean success = attendanceDAO.createAttendance(newAttendance);

                if (success) {
                    studentsTBL.setValueAt("Marked", selectedRow, 4); // Status
                    studentsTBL.setValueAt("Absent", selectedRow, 5); // Remark
                    JOptionPane.showMessageDialog(this, "Student marked as absent successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to mark absent. Please try again.");
                }
            }

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid LRN format.");
        } catch (DateTimeParseException ex) {
            JOptionPane.showMessageDialog(this, "Invalid event date format.");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + ex.getMessage());
        }

    }//GEN-LAST:event_markAbsentMIActionPerformed

        /**
         * @param args the command line arguments
         */
        public static void main(String args[]) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    Mark_Attendance dialog = new Mark_Attendance(new java.awt.Frame(), true, null, null);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                }
            });
        }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel attendanceLBL;
    private javax.swing.JPopupMenu attendancePUM;
    private javax.swing.JMenuItem checkInMI;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JMenuItem markAbsentMI;
    private javax.swing.JTable studentsTBL;
    // End of variables declaration//GEN-END:variables
}
